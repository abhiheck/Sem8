//bfs

#include <iostream>
#include <queue>
#include <vector>
#include <omp.h>

using namespace std;

void parallelBFS(vector<vector<int>>& graph, int source) {
    int numVertices = graph.size();
    vector<bool> visited(numVertices, false);
    vector<int> level(numVertices, -1);

    queue<int> q;
    level[source] = 0;
    visited[source] = true;
    q.push(source);

    while (!q.empty()) {
        int current = q.front();
        q.pop();

        #pragma omp parallel for
        for (int i = 0; i < graph[current].size(); ++i) {
            int neighbor = graph[current][i];

            if (!visited[neighbor]) {
                #pragma omp critical
                {
                    visited[neighbor] = true;
                    level[neighbor] = level[current] + 1;
                    q.push(neighbor);
                }
            }
        }
        cout << "Processing node: " << current << " (Thread: " << omp_get_thread_num() << ")" << endl;

    }

    // Print the level of each vertex
    cout << "Vertex\tLevel" << endl;
    for (int i = 0; i < numVertices; ++i) {
        cout << i << "\t" << level[i] << endl;
    }
}

int main() {
    int numVertices = 7;
    vector<vector<int>> graph(numVertices);

    // Add edges to the graph
    graph[0] = {1, 2};
    graph[1] = {0, 3, 4};
    graph[2] = {0, 5, 6};
    graph[3] = {1};
    graph[4] = {1};
    graph[5] = {2};
    graph[6] = {2};

    int source = 0;
    parallelBFS(graph, source);

    return 0;
}

//dfs
#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

void parallelDFS(vector<vector<int>>& graph, int current, vector<bool>& visited) {
    visited[current] = true;

    cout << "Visited vertex: " << current << endl;

    #pragma omp parallel for
    for (int i = 0; i < graph[current].size(); ++i) {
        int neighbor = graph[current][i];

        if (!visited[neighbor]) {
            #pragma omp task
            parallelDFS(graph, neighbor, visited);
        }
        int threadNum= omp_get_thread_num();
        cout<<"thread using "<<threadNum << "for processing element " << i<<endl;
    }
}

void parallelDFSWrapper(vector<vector<int>>& graph) {
    int numVertices = graph.size();
    vector<bool> visited(numVertices, false);

    #pragma omp parallel
    {
        #pragma omp single nowait
        parallelDFS(graph, 0, visited);
    }
}

int main() {
    int numVertices = 7;
    vector<vector<int>> graph(numVertices);

    // Add edges to the graph
    graph[0] = {1, 2};
    graph[1] = {0, 3, 4};
    graph[2] = {0, 5, 6};
    graph[3] = {1};
    graph[4] = {1};
    graph[5] = {2};
    graph[6] = {2};

    parallelDFSWrapper(graph);

    return 0;
}

//bubble sort
#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

// Parallel Bubble Sort
void parallelBubbleSort(vector<int>& arr) {
    int n = arr.size();
    bool swapped;

    for (int i = 0; i < n - 1; ++i) {
        swapped = false;

        #pragma omp parallel for shared(arr, swapped)
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                #pragma omp critical
                {
                    swap(arr[j], arr[j + 1]);
                    swapped = true;
                }
            }
        }

        if (!swapped) {
            break;
        }
    }
}

int main() {
    vector<int> arr = {9, 7, 5, 11, 12, 2, 14, 3, 10, 6};

    cout << "Original Array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    // Parallel Bubble Sort
    parallelBubbleSort(arr);

    cout << "Sorted Array (Parallel Bubble Sort): ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}

//mergeSort
#include <iostream>
#include <vector>
#include <omp.h>

void merge(std::vector<int>& arr, int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    std::vector<int> leftArr(n1), rightArr(n2);

    for (i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        rightArr[j] = arr[mid + 1 + j];

    i = 0;
    j = 0;
    k = left;

    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }
}

void parallelMergeSort(std::vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        #pragma omp parallel sections
        {
            #pragma omp section
            {
                parallelMergeSort(arr, left, mid);
            }

            #pragma omp section
            {
                parallelMergeSort(arr, mid + 1, right);
            }
        }
        
        
       // to show which thread we are using at instace
        int num_threads = omp_get_num_threads();
        int thread_id = omp_get_thread_num();

        #pragma omp critical
        {
            for (int i = left; i <= right; ++i) {
                std::cout << "Element " << arr[i] << " processed by Thread " << thread_id << "/" << num_threads << std::endl;
            }
        }

        merge(arr, left, mid, right);
    }
}

int main() {
    std::vector<int> numbers = {5, 2, 8, 12, 3};

    std::cout << "Before sorting: ";
    for (int num : numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    parallelMergeSort(numbers, 0, numbers.size() - 1);

    std::cout << "After sorting: ";
    for (int num : numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}

//minmaxavgsum
#include <iostream>
#include <vector>
#include <omp.h>
using namespace std;

void parallelReduction(const vector<int>& arr, int& minVal, int& maxVal, int& sum, double& average) {
    int n = arr.size();
    int localMin = arr[0];
    int localMax = arr[0];
    int localSum = 0;

    #pragma omp parallel for reduction(min : localMin) reduction(max : localMax) reduction(+: localSum)
    for (int i = 0; i < n; i++) {
        localMin = min(localMin, arr[i]);
        localMax = max(localMax, arr[i]);
        localSum += arr[i];

        int threadNum = omp_get_thread_num();
        cout << "Thread " << threadNum << " processed element " << i << endl;
    }

    minVal = localMin;
    maxVal = localMax;
    sum = localSum;
    average = static_cast<double>(localSum) / n;
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> numbers(n);
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> numbers[i];
    }

    int minVal, maxVal, sum;
    double average;

    parallelReduction(numbers, minVal, maxVal, sum, average);

    cout << "Min: " << minVal << endl;
    cout << "Max: " << maxVal << endl;
    cout << "Sum: " << sum << endl;
    cout << "Average: " << average << endl;

    return 0;
}


